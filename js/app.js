// Generated by CoffeeScript 1.5.0
(function() {
  var app;

  app = angular.module("nutrients-per-calorie", ["visuals"]);

  app.factory("FoodData", function($rootScope, Styles) {
    var FoodData, allFoods, allKeys, aminoAcidKeys, comparedKeys, keyAliases, loadCsvData, macronutrientKeys, mineralKeys, miscKeys, nutrientKeys, processFoods, processNutrients, sugarKeys, unusedKeys, vitaminKeys;
    allFoods = {};
    allKeys = ["NDB_No", "Long_Desc", "FdGrp_Desc", "10:0", "12:0", "13:0", "14:0", "14:1", "15:0", "15:1", "16:0", "16:1 c", "16:1 t", "16:1 undifferentiated", "17:0", "17:1", "18:0", "18:1 c", "18:1 t", "18:1 undifferentiated", "18:1-11t (18:1t n-7)", "18:2 CLAs", "18:2 i", "18:2 n-6 c,c", "18:2 t not further defined", "18:2 t,t", "18:2 undifferentiated", "18:3 n-3 c,c,c (ALA)", "18:3 n-6 c,c,c", "18:3 undifferentiated", "18:3i", "18:4", "20:0", "20:1", "20:2 n-6 c,c", "20:3 n-3", "20:3 n-6", "20:3 undifferentiated", "20:4 n-6", "20:4 undifferentiated", "20:5 n-3 (EPA)", "21:5", "22:0", "22:1 c", "22:1 t", "22:1 undifferentiated", "22:4", "22:5 n-3 (DPA)", "22:6 n-3 (DHA)", "24:0", "24:1 c", "4:0", "6:0", "8:0", "Adjusted Protein", "Alanine", "Alcohol, ethyl", "Arginine", "Ash", "Aspartic acid", "Betaine", "Beta-sitosterol", "Caffeine", "Calcium, Ca", "Campesterol", "Carbohydrate, by difference", "Carotene, alpha", "Carotene, beta", "Cholesterol", "Choline, total", "Copper, Cu", "Cryptoxanthin, beta", "Cystine", "Dihydrophylloquinone", "Energy", "Energy (kj)", "Fatty acids, total monounsaturated", "Fatty acids, total polyunsaturated", "Fatty acids, total saturated", "Fatty acids, total trans", "Fatty acids, total trans-monoenoic", "Fatty acids, total trans-polyenoic", "Fiber, total dietary", "Fluoride, F", "Folate, DFE", "Folate, food", "Folate, total", "Folic acid", "Fructose", "Galactose", "Glucose (dextrose)", "Glutamic acid", "Glycine", "Histidine", "Hydroxyproline", "Iron, Fe", "Isoleucine", "Lactose", "Leucine", "Lutein + zeaxanthin", "Lycopene", "Lysine", "Magnesium, Mg", "Maltose", "Manganese, Mn", "Menaquinone-4", "Methionine", "Niacin", "Pantothenic acid", "Phenylalanine", "Phosphorus, P", "Phytosterols", "Potassium, K", "Proline", "Protein", "Retinol", "Riboflavin", "Selenium, Se", "Serine", "Sodium, Na", "Starch", "Stigmasterol", "Sucrose", "Sugars, total", "Theobromine", "Thiamin", "Threonine", "Tocopherol, beta", "Tocopherol, delta", "Tocopherol, gamma", "Total lipid (fat)", "Tryptophan", "Tyrosine", "Valine", "Vitamin A, IU", "Vitamin A, RAE", "Vitamin B-12", "Vitamin B-12, added", "Vitamin B-6", "Vitamin C, total ascorbic acid", "Vitamin D", "Vitamin D (D2 + D3)", "Vitamin D2 (ergocalciferol)", "Vitamin D3 (cholecalciferol)", "Vitamin E (alpha-tocopherol)", "Vitamin E, added", "Vitamin K (phylloquinone)", "Water", "Zinc, Zn"];
    keyAliases = {
      "Fiber, total dietary": "Fiber",
      "Vitamin A, RAE": "Vitamin A",
      "Vitamin C, total ascorbic acid": "Vitamin C",
      "Vitamin D (D2 + D3)": "Vitamin D",
      "Vitamin E (alpha-tocopherol)": "Vitamin E",
      "Vitamin K (phylloquinone)": "Vitamin K",
      "Folate, total": "Folate",
      "Choline, total": "Choline",
      "Calcium, Ca": "Calcium",
      "Iron, Fe": "Iron",
      "Magnesium, Mg": "Magnesium",
      "Manganese, Mn": "Manganese",
      "Phosphorus, P": "Phosphorus",
      "Potassium, K": "Potassium",
      "Sodium, Na": "Sodium",
      "Zinc, Zn": "Zinc"
    };
    comparedKeys = _.difference(allKeys, ["NDB_No", "Long_Desc", "FdGrp_Desc"]);
    macronutrientKeys = ["Total lipid (fat)", "Protein", "Carbohydrate, by difference", "Alcohol, ethyl"];
    miscKeys = _.extend(["Fiber, total dietary", "Lutein + zeaxanthin", "Choline, total"], {
      text: "misc",
      color: Styles.colors.yellow
    });
    vitaminKeys = _.extend(["Vitamin A, RAE", "Vitamin C, total ascorbic acid", "Vitamin D (D2 + D3)", "Vitamin E (alpha-tocopherol)", "Vitamin K (phylloquinone)", "Thiamin", "Riboflavin", "Niacin", "Pantothenic acid", "Vitamin B-6", "Folate, total", "Vitamin B-12"], {
      text: "vitamins",
      color: Styles.colors.green
    });
    mineralKeys = _.extend(["Calcium, Ca", "Iron, Fe", "Magnesium, Mg", "Manganese, Mn", "Phosphorus, P", "Potassium, K", "Sodium, Na", "Zinc, Zn"], {
      text: "minerals",
      color: Styles.colors.violet
    });
    aminoAcidKeys = _.extend(["Histidine", "Isoleucine", "Leucine", "Lysine", "Methionine", "Phenylalanine", "Threonine", "Tryptophan", "Valine"], {
      text: "amino acids",
      color: Styles.colors.blue
    });
    sugarKeys = _.extend(["Fructose", "Galactose", "Glucose (dextrose)", "Lactose", "Maltose", "Sucrose", "Sugars, total"], {
      text: "sugars",
      color: Styles.colors.red
    });
    nutrientKeys = _.union(miscKeys, vitaminKeys, mineralKeys, aminoAcidKeys, sugarKeys);
    unusedKeys = _.difference(allKeys, macronutrientKeys, nutrientKeys);
    FoodData = {
      loaded: false,
      foods: null,
      nutrients: null,
      selectedFoods: [],
      searchQuery: {
        text: "",
        includeFoodGroups: false
      },
      macronutrientKeys: macronutrientKeys,
      nutrientKeys: nutrientKeys,
      miscKeys: miscKeys,
      vitaminKeys: vitaminKeys,
      mineralKeys: mineralKeys,
      aminoAcidKeys: aminoAcidKeys,
      sugarKeys: sugarKeys,
      getKeyAlias: function(key) {
        return keyAliases[key] || key;
      },
      toggleSelect: function(food) {
        food = _.find(this.foods, function(f) {
          return f.NDB_No === food.NDB_No;
        });
        if (!food.selected) {
          food.selected = true;
          this.selectedFoods.push(_.clone(allFoods[food.NDB_No]));
        } else {
          food.selected = false;
          this.selectedFoods = _.reject(this.selectedFoods, function(f) {
            return f.NDB_No === food.NDB_No;
          });
        }
        this.calculateRelativeValues();
        return this;
      },
      clearSelected: function() {
        var food, _i, _len, _ref;
        _ref = this.selectedFoods;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          food = _ref[_i];
          _.find(this.foods, function(f) {
            return f.NDB_No === food.NDB_No;
          }).selected = false;
        }
        this.selectedFoods = [];
        return this;
      },
      calculateRelativeValues: function() {
        var comparedKey, food, key, max, _i, _j, _len, _len1, _ref;
        for (_i = 0, _len = comparedKeys.length; _i < _len; _i++) {
          key = comparedKeys[_i];
          comparedKey = key + "_Compared";
          max = _.max(this.selectedFoods, function(f) {
            return f[key];
          })[key];
          _ref = this.selectedFoods;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            food = _ref[_j];
            if (food[key] != null) {
              food[comparedKey] = food[key] / max || 0;
            }
          }
        }
        return this;
      }
    };
    loadCsvData = function(path, cb) {
      console.log("Loading .csv: ", path);
      return d3.csv(path, function(err, data) {
        if (err) {
          console.error(err);
        }
        return cb(data);
      });
    };
    processNutrients = function(rawNutrients) {
      var data, item, _i, _len;
      data = {};
      for (_i = 0, _len = rawNutrients.length; _i < _len; _i++) {
        item = rawNutrients[_i];
        data[item.NutrDesc] = item;
      }
      return data;
    };
    processFoods = function(rawFoods) {
      var alcoholKey, calculatedCalorieKey, calorieKey, calories, carbohydrateKey, f, fatKey, ignoredKeys, item, k, proteinKey, v, _i, _j, _len, _len1;
      for (_i = 0, _len = rawFoods.length; _i < _len; _i++) {
        item = rawFoods[_i];
        for (k in item) {
          v = item[k];
          if (_.contains(comparedKeys, k)) {
            if (v) {
              item[k] = parseFloat(v);
            } else {
              delete item[k];
            }
          }
        }
        calorieKey = "Energy";
        ignoredKeys = [calorieKey, "Energy (kj)", "Total lipid (fat)", "Protein", "Carbohydrate, by difference"];
        calories = item[calorieKey];
        for (k in item) {
          v = item[k];
          if (typeof v === "number" && !_.contains(ignoredKeys, k)) {
            item[k] = v / calories;
          }
        }
        calculatedCalorieKey = "Calories, calculated";
        fatKey = "Total lipid (fat)";
        proteinKey = "Protein";
        carbohydrateKey = "Carbohydrate, by difference";
        alcoholKey = "Alcohol, ethyl";
        item[fatKey] || (item[fatKey] = 0);
        item[proteinKey] || (item[proteinKey] = 0);
        item[carbohydrateKey] || (item[carbohydrateKey] = 0);
        item[alcoholKey] || (item[alcoholKey] = 0);
        item[fatKey] *= 9;
        item[proteinKey] *= 4;
        item[carbohydrateKey] *= 4;
        item[alcoholKey] *= 7;
        item[calculatedCalorieKey] = item[fatKey] + item[proteinKey] + item[carbohydrateKey] + item[alcoholKey];
        item[fatKey] /= item[calculatedCalorieKey];
        item[proteinKey] /= item[calculatedCalorieKey];
        item[carbohydrateKey] /= item[calculatedCalorieKey];
        item[alcoholKey] /= item[calculatedCalorieKey];
      }
      for (_j = 0, _len1 = rawFoods.length; _j < _len1; _j++) {
        f = rawFoods[_j];
        allFoods[f.NDB_No] = f;
      }
      return _.map(rawFoods, function(f) {
        return _.pick(f, ["NDB_No", "Long_Desc", "FdGrp_Desc"]);
      });
    };
    loadCsvData("data/nutrients.csv", function(rawNutrients) {
      FoodData.nutrients = processNutrients(rawNutrients);
      return loadCsvData("data/foods.csv", function(rawFoods) {
        FoodData.foods = processFoods(rawFoods);
        FoodData.loaded = true;
        $rootScope.$apply();
        return console.log("Loaded FoodData", FoodData);
      });
    });
    return FoodData;
  });

  app.controller("MainCtrl", function($scope, FoodData) {
    $scope.foodData = FoodData;
    return $scope.getSelectedText = function() {
      var count;
      count = FoodData.selectedFoods.length;
      switch (count) {
        case 0:
          return "click two or more foods to compare them";
        case 1:
          return "click another food";
        default:
          return "comparing " + count + " foods";
      }
    };
  });

  app.filter("searchFoods", function() {
    return function(foods, searchQuery) {
      var filteredFoods, food, includeFoodGroups, matchCount, negativeRegExps, negativeSearchPrefixes, positiveRegExps, regExp, text, word, wordCount, words, _i, _j, _k, _l, _len, _len1, _len2, _len3;
      text = searchQuery.text, includeFoodGroups = searchQuery.includeFoodGroups;
      if (text) {
        filteredFoods = [];
        negativeSearchPrefixes = ["!", "-"];
        words = text.split(" ");
        words = _.reject(words, function(w) {
          return !w || w.length === 1 && _.contains(negativeSearchPrefixes, w);
        });
        wordCount = words.length;
        positiveRegExps = [];
        negativeRegExps = [];
        for (_i = 0, _len = words.length; _i < _len; _i++) {
          word = words[_i];
          if (!_.contains(negativeSearchPrefixes, word[0])) {
            positiveRegExps.push(new RegExp(word, "i"));
          } else {
            negativeRegExps.push(new RegExp(word.slice(1), "i"));
          }
        }
        for (_j = 0, _len1 = foods.length; _j < _len1; _j++) {
          food = foods[_j];
          matchCount = 0;
          for (_k = 0, _len2 = positiveRegExps.length; _k < _len2; _k++) {
            regExp = positiveRegExps[_k];
            if (food.Long_Desc.match(regExp) || (includeFoodGroups && food.FdGrp_Desc.match(regExp))) {
              matchCount += 1;
            }
          }
          for (_l = 0, _len3 = negativeRegExps.length; _l < _len3; _l++) {
            regExp = negativeRegExps[_l];
            if (!food.Long_Desc.match(regExp) && !(includeFoodGroups && food.FdGrp_Desc.match(regExp))) {
              matchCount += 1;
            }
          }
          if (wordCount === matchCount) {
            filteredFoods.push(food);
          }
        }
        return filteredFoods;
      } else {
        return foods;
      }
    };
  });

  app.filter("percent", function() {
    return function(number, decimals) {
      var multiple;
      if (decimals == null) {
        decimals = 0;
      }
      if (number != null) {
        multiple = Math.pow(10, decimals);
        return (Math.round(number * multiple * 100) / multiple) + "%";
      } else {
        return "";
      }
    };
  });

}).call(this);
