// Generated by CoffeeScript 1.5.0
(function() {
  var app;

  app = angular.module("nutrients-per-calorie", ["food-visuals", "food-data"]);

  app.config(function($routeProvider) {
    return $routeProvider.when("/compare", {
      templateUrl: "partials/compare.html",
      controller: function($scope, $routeParams) {
        return console.log("COMPARE CTRL", $routeParams);
      }
    }).when("/compare/:foods", {
      templateUrl: "partials/compare.html",
      controller: function($scope, $routeParams) {
        return console.log("COMPARE CTRL", $routeParams);
      }
    }).when("/foods", {
      templateUrl: "partials/foods.html",
      controller: function($scope, $routeParams) {
        return console.log("COMPARE CTRL", $routeParams);
      }
    }).when("/foods/:food", {
      templateUrl: "partials/foods.html",
      controller: function($scope, $routeParams) {
        return console.log("COMPARE CTRL", $routeParams);
      }
    }).when("/nutrients", {
      templateUrl: "partials/nutrients.html",
      controller: function($scope, $routeParams) {
        return console.log("COMPARE CTRL", $routeParams);
      }
    }).when("/nutrients/:nutrient", {
      templateUrl: "partials/nutrients.html",
      controller: function($scope, $routeParams) {
        return console.log("COMPARE CTRL", $routeParams);
      }
    }).when("/about", {
      templateUrl: "partials/about.html",
      controller: function($scope, $routeParams) {
        return console.log("COMPARE CTRL", $routeParams);
      }
    }).otherwise({
      redirectTo: "/compare"
    });
  });

  app.controller("MainCtrl", function($scope, $location, FoodData) {
    $scope.foodData = FoodData;
    return $scope.navLinks = _.extend([
      {
        text: "Compare",
        href: "/#/compare"
      }, {
        text: "Foods",
        href: "/#/foods"
      }, {
        text: "Nutrients",
        href: "/#/nutrients"
      }, {
        text: "About",
        href: "/#/about"
      }
    ], {
      isActive: function(navLink) {
        return navLink.href === "/#" + $location.path();
      }
    });
  });

  app.filter("searchFoods", function() {
    return function(foods, searchQuery) {
      var filteredFoods, food, includeFoodGroups, matchCount, negativeRegExps, negativeSearchPrefixes, positiveRegExps, regExp, text, word, wordCount, words, _i, _j, _k, _l, _len, _len1, _len2, _len3;
      text = searchQuery.text, includeFoodGroups = searchQuery.includeFoodGroups;
      if (text) {
        filteredFoods = [];
        negativeSearchPrefixes = ["!", "-"];
        words = text.split(" ");
        words = _.reject(words, function(w) {
          return !w || w.length === 1 && _.contains(negativeSearchPrefixes, w);
        });
        wordCount = words.length;
        positiveRegExps = [];
        negativeRegExps = [];
        for (_i = 0, _len = words.length; _i < _len; _i++) {
          word = words[_i];
          if (!_.contains(negativeSearchPrefixes, word[0])) {
            positiveRegExps.push(new RegExp(word, "i"));
          } else {
            negativeRegExps.push(new RegExp(word.slice(1), "i"));
          }
        }
        for (_j = 0, _len1 = foods.length; _j < _len1; _j++) {
          food = foods[_j];
          matchCount = 0;
          for (_k = 0, _len2 = positiveRegExps.length; _k < _len2; _k++) {
            regExp = positiveRegExps[_k];
            if (food.Long_Desc.match(regExp) || (includeFoodGroups && food.FdGrp_Desc.match(regExp))) {
              matchCount += 1;
            }
          }
          for (_l = 0, _len3 = negativeRegExps.length; _l < _len3; _l++) {
            regExp = negativeRegExps[_l];
            if (!food.Long_Desc.match(regExp) && !(includeFoodGroups && food.FdGrp_Desc.match(regExp))) {
              matchCount += 1;
            }
          }
          if (wordCount === matchCount) {
            filteredFoods.push(food);
          }
        }
        return filteredFoods;
      } else {
        return foods;
      }
    };
  });

  app.filter("percent", function() {
    return function(number, decimals) {
      var multiple;
      if (decimals == null) {
        decimals = 0;
      }
      if (number != null) {
        multiple = Math.pow(10, decimals);
        return (Math.round(number * multiple * 100) / multiple) + "%";
      } else {
        return "";
      }
    };
  });

}).call(this);
