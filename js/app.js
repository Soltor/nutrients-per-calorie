// Generated by CoffeeScript 1.6.1

/*

Use cases
  [x] Compare n foods against one another.
    [x] Daily recommendation baseline
    [x] Comparison presets
    [ ] Option to show comparison graphs in search
  [x] What are the best sources of nutrient x?
  [ ] Compose meals that get added to the food list, choosing foods and their quantities.
  [.] Do the above with food set x. (vegan, vegetarian, raw, natural, etc)
*/


(function() {
  var app, data, visuals;

  app = angular.module("nutrients-per-calorie", ["food-visuals", "food-data"]);

  app.config(function($routeProvider) {
    return $routeProvider.when("/compare", {
      templateUrl: "partials/compare.html",
      controller: "CompareCtrl",
      reloadOnSearch: false
    }).when("/compare/:foods", {
      templateUrl: "partials/compare.html",
      controller: "CompareCtrl",
      reloadOnSearch: false
    }).when("/nutrients", {
      templateUrl: "partials/nutrients.html",
      controller: "NutrientsCtrl",
      reloadOnSearch: false
    }).when("/nutrients/:nutrient", {
      templateUrl: "partials/nutrients.html",
      controller: "NutrientsCtrl",
      reloadOnSearch: false
    }).when("/about", {
      templateUrl: "partials/about.html"
    }).when("/options", {
      templateUrl: "partials/options.html",
      controller: "OptionsCtrl"
    }).otherwise({
      redirectTo: "/compare"
    });
  });

  app.controller("MainCtrl", function($scope, $location, FoodData, ComparePage, NutrientsPage) {
    $scope.foodData = FoodData;
    return $scope.navLinks = _.extend([
      {
        text: "Compare",
        getPath: ComparePage.getPath
      }, {
        text: "Nutrients",
        getPath: NutrientsPage.getPath
      }, {
        text: "About",
        getPath: function() {
          return "#/about";
        }
      }, {
        text: "Options",
        getPath: function() {
          return "#/options";
        }
      }
    ], {
      isActive: function(navLink) {
        return _.contains(navLink.getPath(), $location.path());
      }
    });
  });

  app.factory("ComparePage", function($location, FoodData) {
    var data, save, saveKey, selectedFoods;
    data = {
      query: {
        text: "",
        includeFoodGroups: false
      },
      selectedFoods: [],
      isSelected: function(food) {
        return !!_.find(data.selectedFoods, function(f) {
          return f.NDB_No === food.NDB_No;
        });
      },
      toggle: function(food) {
        if (data.isSelected(food)) {
          return data.deselect(food);
        } else {
          return data.select(food);
        }
      },
      deselect: function(food) {
        data.selectedFoods = _.reject(data.selectedFoods, function(f) {
          return f.NDB_No === food.NDB_No;
        });
        return save();
      },
      select: function(food) {
        data.deselect(food);
        data.selectedFoods.push(_.clone(food));
        return save();
      },
      clear: function() {
        var food, _i, _len, _ref;
        _ref = data.selectedFoods.slice(1);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          food = _ref[_i];
          FoodData.findFoodById(food.NDB_No).selected = false;
        }
        return data.reset();
      },
      reset: function(foods) {
        data.selectedFoods = FoodData.benchmarkFood ? [FoodData.benchmarkFood] : [];
        if (foods) {
          data.selectedFoods = data.selectedFoods.concat(foods);
        }
        return save();
      },
      basePath: "#/compare",
      updatePath: function() {
        return window.location.hash = data.getPath();
      },
      getPath: function(foods) {
        if (foods == null) {
          foods = data.selectedFoods.slice(1);
        }
        return data.basePath + data.getSearch(foods);
      },
      getSearch: function(foods) {
        if (foods == null) {
          foods = data.selectedFoods.slice(1);
        }
        if (foods.length) {
          return "?foods=" + _.pluck(foods, "NDB_No").join(",");
        } else {
          return "";
        }
      },
      getPathWithFoodAdded: function(food) {
        var foods;
        if (food) {
          foods = _.clone(data.selectedFoods);
          if (!_.find(foods, function(f) {
            return f.NDB_No === food.NDB_No;
          })) {
            foods.push(food);
          }
          return data.getPath(foods);
        } else {
          return data.basePath;
        }
      }
    };
    saveKey = "selectedFoods";
    selectedFoods = window.localStorage.getItem(saveKey);
    if (selectedFoods) {
      data.selectedFoods = JSON.parse(selectedFoods);
    }
    save = function() {
      return window.localStorage.setItem(saveKey, JSON.stringify(data.selectedFoods));
    };
    return data;
  });

  app.controller("CompareCtrl", function($scope, $routeParams, $timeout, FoodData, ComparePage, Presets) {
    FoodData.afterLoading($scope, function() {
      var foods;
      foods = null;
      if ($routeParams.foods) {
        foods = FoodData.findFoodsById($routeParams.foods.split(","));
      }
      return ComparePage.reset(foods);
    });
    $scope.ComparePage = ComparePage;
    $scope.$watch("ComparePage.selectedFoods", function(newVal, oldVal) {
      FoodData.calculateRelativeValues(newVal);
      if (FoodData.loaded) {
        return ComparePage.updatePath();
      }
    });
    $scope.hasSelectedFoods = function() {
      return ComparePage.selectedFoods.length > 1;
    };
    $scope.newPresetName = "";
    $scope.Presets = Presets;
    $scope.createPreset = function(name) {
      if (!$scope.hasSelectedFoods()) {
        return alert("Choose some foods before saving the set.");
      } else if (!name) {
        return alert("Please name the set of foods to save it.");
      } else {
        Presets.create(name);
        return $scope.newPresetName = "";
      }
    };
    $scope.removePreset = function(preset) {
      return $timeout(function() {
        return Presets.remove(preset);
      }, 0);
    };
    return $scope.isRemoveable = function(food) {
      return food.NDB_No !== "0";
    };
  });

  app.factory("NutrientsPage", function($location, FoodData) {
    var data, save, saveKey, selectedNutrient;
    data = {
      query: {
        text: "",
        includeFoodGroups: false
      },
      selectedNutrient: null,
      filteredFoods: FoodData.foods,
      isSelected: function(nutrient) {
        var _ref;
        return (nutrient != null ? nutrient.Nutr_No : void 0) === ((_ref = this.selectedNutrient) != null ? _ref.Nutr_No : void 0);
      },
      toggle: function(nutrient) {
        if (this.isSelected(nutrient)) {
          this.selectedNutrient = null;
        } else {
          this.selectedNutrient = _.clone(nutrient);
        }
        return save();
      },
      orderBy: function(food) {
        var value;
        value = food.nutrientValue;
        if (value != null) {
          return value;
        } else {
          return -1;
        }
      },
      basePath: "#/nutrients",
      updatePath: function() {
        return window.location.hash = this.getPath();
      },
      getPath: function(nutrient) {
        if (nutrient == null) {
          nutrient = data.selectedNutrient;
        }
        return data.basePath + data.getSearch(nutrient);
      },
      getSearch: function(nutrient) {
        if (nutrient == null) {
          nutrient = data.selectedNutrient;
        }
        if (nutrient) {
          return "?nutrient=" + nutrient.Nutr_No;
        } else {
          return "";
        }
      }
    };
    saveKey = "selectedNutrient";
    selectedNutrient = window.localStorage.getItem(saveKey);
    if (selectedNutrient) {
      data.selectedNutrient = JSON.parse(selectedNutrient);
    }
    save = function() {
      return window.localStorage.setItem(saveKey, JSON.stringify(data.selectedNutrient));
    };
    return data;
  });

  app.controller("NutrientsCtrl", function($scope, $routeParams, $filter, FoodData, NutrientsPage, ComparePage) {
    var calculateMaxValue, filteredFoodsWithoutValues, maxValue, updateFilteredFoods;
    FoodData.afterLoading($scope, function() {
      if ($routeParams.nutrient) {
        return NutrientsPage.selectedNutrient = _.clone(FoodData.findNutrientById($routeParams.nutrient));
      } else {
        return NutrientsPage.selectedNutrient = null;
      }
    });
    $scope.NutrientsPage = NutrientsPage;
    $scope.nutrientKeyLists = [FoodData.macronutrientKeys, FoodData.vitaminKeys, FoodData.mineralKeys, FoodData.aminoAcidKeys, FoodData.miscKeys, FoodData.fattyAcidKeys, FoodData.sugarKeys, FoodData.otherKeys];
    $scope.selectFood = function(food) {
      ComparePage.select(food);
      return ComparePage.updatePath();
    };
    filteredFoodsWithoutValues = null;
    maxValue = null;
    calculateMaxValue = function(nutrient) {
      var food, max, value, _i, _len;
      if (nutrient && filteredFoodsWithoutValues.length) {
        max = 0;
        for (_i = 0, _len = filteredFoodsWithoutValues.length; _i < _len; _i++) {
          food = filteredFoodsWithoutValues[_i];
          value = food[nutrient.NutrDesc];
          if (typeof value === "number" && value > max) {
            max = value;
          }
        }
        return max;
      } else {
        return null;
      }
    };
    updateFilteredFoods = function(applyFilter) {
      var selectedNutrient;
      if (!FoodData.loaded) {
        return;
      }
      if (applyFilter) {
        filteredFoodsWithoutValues = $filter("searchFoods")(FoodData.foods, NutrientsPage.query);
      } else {
        if (filteredFoodsWithoutValues == null) {
          filteredFoodsWithoutValues = FoodData.foods;
        }
      }
      selectedNutrient = NutrientsPage.selectedNutrient;
      maxValue = calculateMaxValue(selectedNutrient);
      NutrientsPage.filteredFoods = selectedNutrient ? _.map(filteredFoodsWithoutValues, function(f) {
        var food;
        food = {
          NDB_No: f.NDB_No,
          Long_Desc: f.Long_Desc,
          FdGrp_Desc: f.FdGrp_Desc
        };
        food.nutrientValue = f[selectedNutrient.NutrDesc] || 0;
        food.nutrientPercentOfMax = maxValue ? ((food.nutrientValue / maxValue) * 100) + "%" : "0%";
        return food;
      }) : [];
      return NutrientsPage.updatePath();
    };
    $scope.$watch("NutrientsPage.query.text", function(newVal, oldVal) {
      return updateFilteredFoods(true);
    });
    $scope.$watch("NutrientsPage.selectedNutrient", function(newVal, oldVal) {
      return updateFilteredFoods();
    });
    $scope.$watch("NutrientsPage.query.includeFoodGroups", function(newVal, oldVal) {
      return updateFilteredFoods(true);
    });
    return $scope.$watch("foodData.foods", function(newVal, oldVal) {
      return updateFilteredFoods(true);
    });
  });

  app.factory("OptionsPage", function(FoodData) {
    var data;
    return data = {
      setActiveDatabase: function(database) {
        if (FoodData.databases.getActive() !== database) {
          return FoodData.databases.setActive(database);
        }
      },
      getActiveDatabase: function() {
        return FoodData.databases.getActive().name;
      }
    };
  });

  app.controller("OptionsCtrl", function($scope, OptionsPage, FoodData) {
    return $scope.options = OptionsPage;
  });

  app.directive("foodSearch", function() {
    return {
      restrict: "E",
      templateUrl: "partials/food-search.html",
      scope: {
        foodData: "=",
        helpers: "="
      }
    };
  });

  app.directive("nutrientList", function(FoodData) {
    return {
      restrict: "E",
      templateUrl: "partials/nutrient-list.html",
      scope: {
        nutrientKeys: "=",
        helpers: "="
      },
      link: function(scope, element, attrs) {
        return scope.nutrients = _.map(scope.nutrientKeys, function(n) {
          return FoodData.nutrients[n];
        });
      }
    };
  });

  app.directive("foodGroupFilter", function(FoodData) {
    var supressEnableAllChange;
    supressEnableAllChange = false;
    return {
      restrict: "E",
      templateUrl: "partials/food-group-filter.html",
      scope: {
        foodData: "="
      },
      link: function(scope, element, attrs) {
        FoodData.afterLoading(scope, function() {
          scope.foodGroups = FoodData.foodGroups;
          return scope.enableAllFoodGroups = FoodData.areAllFoodGroupsEnabled();
        });
        scope.$watch("foodGroups", function(newVal, oldVal) {
          FoodData.updateFoodGroups();
          if (scope.enableAllFoodGroups && FoodData.areAllFoodGroupsEnabled(oldVal) && !FoodData.areAllFoodGroupsEnabled(newVal) && FoodData.getFoodGroupsEnabledCount(newVal) > 0) {
            supressEnableAllChange = true;
            scope.enableAllFoodGroups = false;
          }
          if (!scope.enableAllFoodGroups && FoodData.areAllFoodGroupsEnabled(newVal) && !FoodData.areAllFoodGroupsEnabled(oldVal) && FoodData.getFoodGroupsEnabledCount(oldVal) > 0) {
            supressEnableAllChange = true;
            return scope.enableAllFoodGroups = true;
          }
        }, true);
        return scope.$watch("enableAllFoodGroups", function(newVal, oldVal) {
          var foodGroup, _i, _len, _ref, _results;
          if (supressEnableAllChange) {
            supressEnableAllChange = false;
            return;
          }
          if (newVal !== oldVal) {
            _ref = FoodData.foodGroups;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              foodGroup = _ref[_i];
              _results.push(foodGroup.enabled = newVal);
            }
            return _results;
          }
        });
      }
    };
  });

  app.filter("searchFoods", function() {
    return function(foods, query) {
      var filteredFoods, food, includeFoodGroups, matchCount, negativeRegExps, negativeSearchPrefixes, positiveRegExps, regExp, text, word, wordCount, words, _i, _j, _k, _l, _len, _len1, _len2, _len3;
      text = query.text, includeFoodGroups = query.includeFoodGroups;
      if (text && typeof text === "string") {
        text = text.replace(/[^a-zA-Z0-9.,%\-! ]/g, "");
        filteredFoods = [];
        negativeSearchPrefixes = ["!", "-"];
        words = text.split(" ");
        words = _.reject(words, function(w) {
          return !w || w.length === 1 && _.contains(negativeSearchPrefixes, w);
        });
        wordCount = words.length;
        positiveRegExps = [];
        negativeRegExps = [];
        for (_i = 0, _len = words.length; _i < _len; _i++) {
          word = words[_i];
          if (!_.contains(negativeSearchPrefixes, word[0])) {
            positiveRegExps.push(new RegExp(word, "i"));
          } else {
            negativeRegExps.push(new RegExp(word.slice(1), "i"));
          }
        }
        for (_j = 0, _len1 = foods.length; _j < _len1; _j++) {
          food = foods[_j];
          matchCount = 0;
          for (_k = 0, _len2 = positiveRegExps.length; _k < _len2; _k++) {
            regExp = positiveRegExps[_k];
            if (food.Long_Desc.match(regExp) || (includeFoodGroups && food.FdGrp_Desc.match(regExp))) {
              matchCount += 1;
            }
          }
          for (_l = 0, _len3 = negativeRegExps.length; _l < _len3; _l++) {
            regExp = negativeRegExps[_l];
            if (!food.Long_Desc.match(regExp) && !(includeFoodGroups && food.FdGrp_Desc.match(regExp))) {
              matchCount += 1;
            }
          }
          if (wordCount === matchCount) {
            filteredFoods.push(food);
          }
        }
        return filteredFoods;
      } else {
        return foods;
      }
    };
  });

  app.filter("percent", function() {
    return function(number, decimals) {
      var multiple;
      if (decimals == null) {
        decimals = 0;
      }
      if (number != null) {
        multiple = Math.pow(10, decimals);
        return (Math.round(number * multiple * 100) / multiple) + "%";
      } else {
        return "";
      }
    };
  });

  app.directive("mmInputClearer", function() {
    return {
      link: function(scope, element, attrs) {
        var inputClearer;
        inputClearer = angular.element("<div class='input-clearer'>✕</div>");
        inputClearer.on("click", function() {
          return element.val("").focus().trigger("input");
        });
        return element.after(inputClearer);
      }
    };
  });

  app.directive("mmDropdown", function(FoodData) {
    return {
      restrict: "C",
      link: function(scope, element, attrs) {
        var onClick;
        onClick = function(e) {
          if (element.hasClass("open") && element !== e.target && !element.find(e.target).length) {
            scope.toggle();
          }
          return true;
        };
        FoodData.afterLoading(scope, function() {
          return $(window).on("click", onClick);
        });
        scope.toggle = function() {
          return element.toggleClass("open");
        };
        return scope.$on("$destroy", function() {
          return $(window).off("click", onClick);
        });
      }
    };
  });

  app.directive("mmKeydown", function() {
    return {
      link: function(scope, element, attrs) {
        return element.on("keydown", function(e) {
          if (_.contains(attrs.mmKeyCodes.split(" "), e.keyCode.toString())) {
            scope.$apply(function() {
              return scope.$eval(attrs.mmKeydown);
            });
          }
          return true;
        });
      }
    };
  });

  data = angular.module("food-data", []);

  data.factory("FoodData", function($rootScope, Styles) {
    var FoodData, alcoholKey, allFoods, allKeys, aminoAcidKeys, calorieKey, carbohydrateKey, comparedKeys, createBenchmarkFood, createFoodGroups, fatKey, fattyAcidKeys, fiberKeys, ignoredKeys, keyAliases, listedKeys, loadCsvData, macronutrientKeys, mineralKeys, miscKeys, nutrientKeys, onLoadCbs, otherKeys, processFood, processFoods, processNutrients, proteinKey, sugarKeys, unusedKeys, vitaminKeys;
    allFoods = null;
    allKeys = ["NDB_No", "Long_Desc", "FdGrp_Desc", "10:0", "12:0", "13:0", "14:0", "14:1", "15:0", "15:1", "16:0", "16:1 c", "16:1 t", "16:1 undifferentiated", "17:0", "17:1", "18:0", "18:1 c", "18:1 t", "18:1 undifferentiated", "18:1-11t (18:1t n-7)", "18:2 CLAs", "18:2 i", "18:2 n-6 c,c", "18:2 t not further defined", "18:2 t,t", "18:2 undifferentiated", "18:3 n-3 c,c,c (ALA)", "18:3 n-6 c,c,c", "18:3 undifferentiated", "18:3i", "18:4", "20:0", "20:1", "20:2 n-6 c,c", "20:3 n-3", "20:3 n-6", "20:3 undifferentiated", "20:4 n-6", "20:4 undifferentiated", "20:5 n-3 (EPA)", "21:5", "22:0", "22:1 c", "22:1 t", "22:1 undifferentiated", "22:4", "22:5 n-3 (DPA)", "22:6 n-3 (DHA)", "24:0", "24:1 c", "4:0", "6:0", "8:0", "Adjusted Protein", "Alanine", "Alcohol, ethyl", "Arginine", "Ash", "Aspartic acid", "Betaine", "Beta-sitosterol", "Caffeine", "Calcium, Ca", "Campesterol", "Carbohydrate, by difference", "Carotene, alpha", "Carotene, beta", "Cholesterol", "Choline, total", "Copper, Cu", "Cryptoxanthin, beta", "Cystine", "Dihydrophylloquinone", "Energy", "Energy (kj)", "Fatty acids, total monounsaturated", "Fatty acids, total polyunsaturated", "Fatty acids, total saturated", "Fatty acids, total trans", "Fatty acids, total trans-monoenoic", "Fatty acids, total trans-polyenoic", "Fiber, total dietary", "Fluoride, F", "Folate, DFE", "Folate, food", "Folate, total", "Folic acid", "Fructose", "Galactose", "Glucose (dextrose)", "Glutamic acid", "Glycine", "Histidine", "Hydroxyproline", "Iron, Fe", "Isoleucine", "Lactose", "Leucine", "Lutein + zeaxanthin", "Lycopene", "Lysine", "Magnesium, Mg", "Maltose", "Manganese, Mn", "Menaquinone-4", "Methionine", "Niacin", "Pantothenic acid", "Phenylalanine", "Phosphorus, P", "Phytosterols", "Potassium, K", "Proline", "Protein", "Retinol", "Riboflavin", "Selenium, Se", "Serine", "Sodium, Na", "Starch", "Stigmasterol", "Sucrose", "Sugars, total", "Theobromine", "Thiamin", "Threonine", "Tocopherol, beta", "Tocopherol, delta", "Tocopherol, gamma", "Total lipid (fat)", "Tryptophan", "Tyrosine", "Valine", "Vitamin A, IU", "Vitamin A, RAE", "Vitamin B-12", "Vitamin B-12, added", "Vitamin B-6", "Vitamin C, total ascorbic acid", "Vitamin D", "Vitamin D (D2 + D3)", "Vitamin D2 (ergocalciferol)", "Vitamin D3 (cholecalciferol)", "Vitamin E (alpha-tocopherol)", "Vitamin E, added", "Vitamin K (phylloquinone)", "Water", "Zinc, Zn"];
    keyAliases = {
      "Total lipid (fat)": "Fat",
      "Carbohydrate, by difference": "Carbohydrate",
      "Fiber, total dietary": "Fiber",
      "Alcohol, ethyl": "Alcohol",
      "Vitamin A, RAE": "Vitamin A",
      "Vitamin C, total ascorbic acid": "Vitamin C",
      "Vitamin E (alpha-tocopherol)": "Vitamin E",
      "Vitamin K (phylloquinone)": "Vitamin K",
      "Folate, total": "Folate",
      "Choline, total": "Choline",
      "Calcium, Ca": "Calcium",
      "Iron, Fe": "Iron",
      "Magnesium, Mg": "Magnesium",
      "Manganese, Mn": "Manganese",
      "Phosphorus, P": "Phosphorus",
      "Potassium, K": "Potassium",
      "Sodium, Na": "Sodium",
      "Zinc, Zn": "Zinc",
      "Glucose (dextrose)": "Glucose",
      "Carotene, alpha": "Alpha-Carotene",
      "Carotene, beta": "Beta-Carotene",
      "Fatty acids, total saturated": "Saturated fats",
      "Fatty acids, total trans": "Trans fats",
      "Fatty acids, total monounsaturated": "Monounsaturated fats",
      "Fatty acids, total polyunsaturated": "Polyunsaturated fats"
    };
    calorieKey = "Energy";
    fatKey = "Total lipid (fat)";
    proteinKey = "Protein";
    carbohydrateKey = "Carbohydrate, by difference";
    alcoholKey = "Alcohol, ethyl";
    comparedKeys = _.difference(allKeys, ["NDB_No", "Long_Desc", "FdGrp_Desc"]);
    macronutrientKeys = _.extend(["Total lipid (fat)", "Protein", "Carbohydrate, by difference", "Fiber, total dietary"], {
      text: "Macronutrients"
    });
    fiberKeys = _.extend(["Fiber, total dietary"], {
      text: "Fiber",
      color: Styles.colors.yellow
    });
    vitaminKeys = _.extend(["Vitamin A, RAE", "Vitamin C, total ascorbic acid", "Vitamin D", "Vitamin E (alpha-tocopherol)", "Vitamin K (phylloquinone)", "Thiamin", "Riboflavin", "Niacin", "Pantothenic acid", "Vitamin B-6", "Folate, total", "Vitamin B-12"], {
      text: "Vitamins",
      color: Styles.colors.green
    });
    mineralKeys = _.extend(["Calcium, Ca", "Iron, Fe", "Magnesium, Mg", "Manganese, Mn", "Phosphorus, P", "Potassium, K", "Sodium, Na", "Zinc, Zn"], {
      text: "Minerals",
      color: Styles.colors.violet
    });
    aminoAcidKeys = _.extend(["Histidine", "Isoleucine", "Leucine", "Lysine", "Methionine", "Phenylalanine", "Threonine", "Tryptophan", "Valine"], {
      text: "Amino Acids",
      color: Styles.colors.blue
    });
    fattyAcidKeys = _.extend(["Fatty acids, total monounsaturated", "Fatty acids, total polyunsaturated", "Fatty acids, total saturated", "Fatty acids, total trans"], {
      text: "Fats",
      color: Styles.colors.redYellow
    });
    miscKeys = _.extend(["Carotene, alpha", "Carotene, beta", "Choline, total", "Lutein + zeaxanthin", "Lycopene", "Phytosterols", "Cholesterol"], {
      text: "Misc",
      color: Styles.colors.greenBlue
    });
    sugarKeys = _.extend(["Fructose", "Galactose", "Glucose (dextrose)", "Lactose", "Maltose", "Sucrose", "Sugars, total"], {
      text: "Sugars",
      color: Styles.colors.red
    });
    listedKeys = _.union(macronutrientKeys, fiberKeys, vitaminKeys, mineralKeys, aminoAcidKeys, fattyAcidKeys, miscKeys, sugarKeys);
    ignoredKeys = ["NDB_No", "Long_Desc", "FdGrp_Desc", "10:0", "12:0", "13:0", "14:0", "14:1", "15:0", "15:1", "16:0", "16:1 c", "16:1 t", "16:1 undifferentiated", "17:0", "17:1", "18:0", "18:1 c", "18:1 t", "18:1 undifferentiated", "18:1-11t (18:1t n-7)", "18:2 CLAs", "18:2 i", "18:2 n-6 c,c", "18:2 t not further defined", "18:2 t,t", "18:2 undifferentiated", "18:3 n-3 c,c,c (ALA)", "18:3 n-6 c,c,c", "18:3 undifferentiated", "18:3i", "18:4", "20:0", "20:1", "20:2 n-6 c,c", "20:3 n-3", "20:3 n-6", "20:3 undifferentiated", "20:4 n-6", "20:4 undifferentiated", "20:5 n-3 (EPA)", "21:5", "22:0", "22:1 c", "22:1 t", "22:1 undifferentiated", "22:4", "22:5 n-3 (DPA)", "22:6 n-3 (DHA)", "24:0", "24:1 c", "4:0", "6:0", "8:0", "Adjusted Protein", "Alcohol, ethyl", "Ash", "Caffeine", "Energy", "Energy (kj)", "Folic acid", "Folate, DFE", "Fatty acids, total trans-monoenoic", "Fatty acids, total trans-polyenoic", "Fluoride, F", "Vitamin A, IU", "Vitamin B-12, added", "Vitamin D (D2 + D3)", "Vitamin E, added", "Water"];
    otherKeys = _.extend(_.difference(allKeys, listedKeys, ignoredKeys), {
      text: "Other",
      color: Styles.colors.greenBlue
    });
    nutrientKeys = _.union(listedKeys, otherKeys);
    unusedKeys = _.difference(allKeys, nutrientKeys);
    loadCsvData = function(path, cb) {
      console.log("Loading .csv: ", path);
      return d3.csv(path, function(err, data) {
        if (err) {
          console.error(err);
        }
        return cb(data);
      });
    };
    onLoadCbs = [];
    FoodData = {
      loaded: false,
      foods: null,
      nutrients: null,
      foodGroups: [],
      selectedFoods: [],
      macronutrientKeys: macronutrientKeys,
      fiberKeys: fiberKeys,
      vitaminKeys: vitaminKeys,
      mineralKeys: mineralKeys,
      aminoAcidKeys: aminoAcidKeys,
      fattyAcidKeys: fattyAcidKeys,
      miscKeys: miscKeys,
      sugarKeys: sugarKeys,
      otherKeys: otherKeys,
      unusedKeys: unusedKeys,
      findNutrientById: function(Nutr_No) {
        return _.find(this.nutrients, function(n) {
          return n.Nutr_No === Nutr_No;
        });
      },
      findFoodById: function(id) {
        return _.find(allFoods, function(f) {
          return f.NDB_No === id;
        });
      },
      findFoodsById: function(ids) {
        var id;
        return _.compact((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = ids.length; _i < _len; _i++) {
            id = ids[_i];
            _results.push(this.findFoodById(id));
          }
          return _results;
        }).call(this));
      },
      getNutrientJSLink: function(NutrDesc) {
        return "javascript: window.location = '" + (this.getNutrientLink(NutrDesc)) + "';";
      },
      getNutrientLink: function(NutrDesc) {
        return "#/nutrients?nutrient=" + this.nutrients[NutrDesc].Nutr_No;
      },
      updateFoodGroups: function() {
        var enabledFoodGroups;
        enabledFoodGroups = _.pluck(_.filter(this.foodGroups, function(g) {
          return g.enabled;
        }), "name");
        return this.foods = _.filter(allFoods, function(f) {
          return _.contains(enabledFoodGroups, f.FdGrp_Desc);
        });
      },
      areAllFoodGroupsEnabled: function(foodGroups) {
        if (foodGroups == null) {
          foodGroups = FoodData.foodGroups;
        }
        return !_.find(foodGroups, function(g) {
          return !g.enabled;
        });
      },
      getFoodGroupsEnabledCount: function(foodGroups) {
        if (foodGroups == null) {
          foodGroups = FoodData.foodGroups;
        }
        return _.filter(foodGroups, function(g) {
          return g.enabled;
        }).length;
      },
      calculateRelativeValues: function(foods) {
        var comparedKey, food, key, max, _i, _j, _len, _len1;
        for (_i = 0, _len = comparedKeys.length; _i < _len; _i++) {
          key = comparedKeys[_i];
          comparedKey = key + "_Compared";
          max = _.max(foods, function(f) {
            return f[key];
          })[key];
          for (_j = 0, _len1 = foods.length; _j < _len1; _j++) {
            food = foods[_j];
            if (food[key] != null) {
              food[comparedKey] = food[key] / max || 0;
            }
          }
        }
        return foods;
      },
      onLoad: function(cb, callIfLoaded) {
        if (callIfLoaded == null) {
          callIfLoaded = false;
        }
        if (!this.loaded) {
          return onLoadCbs.push(cb);
        } else if (callIfLoaded) {
          return cb();
        }
      },
      afterLoading: function(scope, cb) {
        if (this.loaded) {
          return cb();
        } else {
          return this.onLoad(function() {
            cb();
            return scope.$apply();
          });
        }
      },
      databases: _.extend([
        {
          name: "main",
          size: "2.7mb",
          title: "Main database",
          text: "Excludes name brands, beverages, sweets, baby food, a few outliers, and some redundant data for a speedier experience.",
          active: true
        }, {
          name: "complete",
          size: "3.7mb",
          title: "Complete database",
          text: "Every food available at http://ndb.nal.usda.gov/."
        }, {
          name: "vegan",
          size: "0.8mb",
          title: "Vegan database",
          text: "Plants and fungi. Compiled by hand, so if you see an oversight please let me know!"
        }, {
          name: "vegetarian",
          size: "1.3mb",
          title: "Vegetarian database (ovo-lacto)",
          text: "Plants, fungi, and meatless animal products. Send me any corrections!"
        }, {
          name: "raw"
        }, {
          name: "natural"
        }, {
          name: "pescatarian"
        }, {
          name: "paleo"
        }
      ], {
        getPath: function(database) {
          return "data/foods-" + database.name + ".csv";
        },
        getActive: function() {
          return _.find(FoodData.databases, function(d) {
            return d.active;
          });
        },
        setActive: function(database) {
          var lastActive;
          if (database == null) {
            database = FoodData.databases.getActive();
          }
          if (typeof database === "string") {
            database = _.find(FoodData.databases, function(d) {
              return d.name === database;
            });
          }
          if (!(database != null ? database.name : void 0)) {
            return;
          }
          lastActive = FoodData.databases.getActive();
          lastActive.active = false;
          database.active = true;
          if (FoodData.loaded) {
            FoodData.databases.save();
            return FoodData.databases.load();
          }
        },
        save: function() {
          var _ref;
          return (_ref = window.localStorage) != null ? _ref.setItem("food-database", FoodData.databases.getActive().name) : void 0;
        },
        load: function(database) {
          var databaseName, _ref;
          if (typeof database === "string") {
            database = _.find(FoodData.databases, function(d) {
              return d.name === database;
            });
          }
          if (!database) {
            databaseName = (_ref = window.localStorage) != null ? _ref.getItem("food-database") : void 0;
            database = _.find(FoodData.databases, function(d) {
              return d.name === databaseName;
            });
          }
          if (database == null) {
            database = FoodData.databases.getActive();
          }
          FoodData.loaded = false;
          return loadCsvData("data/nutrients.csv", function(rawNutrients) {
            FoodData.nutrients = processNutrients(rawNutrients);
            FoodData.benchmarkFood = createBenchmarkFood(FoodData.nutrients);
            return loadCsvData("data/foods-" + database.name + ".csv", function(rawFoods) {
              var cb, _i, _len;
              FoodData.foods = allFoods = processFoods(rawFoods);
              FoodData.foodGroups = createFoodGroups(FoodData.foods);
              FoodData.databases.setActive(database);
              FoodData.loaded = true;
              for (_i = 0, _len = onLoadCbs.length; _i < _len; _i++) {
                cb = onLoadCbs[_i];
                cb();
              }
              onLoadCbs = [];
              $rootScope.$apply();
              return console.log("Loaded FoodData", FoodData);
            });
          });
        }
      })
    };
    FoodData.databases.load();
    processNutrients = function(rawNutrients) {
      var item, _i, _len;
      data = {};
      for (_i = 0, _len = rawNutrients.length; _i < _len; _i++) {
        item = rawNutrients[_i];
        data[item.NutrDesc] = item;
        item.text = keyAliases[item.NutrDesc] || item.NutrDesc;
      }
      return data;
    };
    processFoods = function(foods) {
      var food, _i, _len;
      foods = _.sortBy(foods, function(f) {
        return f.Long_Desc;
      });
      for (_i = 0, _len = foods.length; _i < _len; _i++) {
        food = foods[_i];
        processFood(food);
      }
      return foods;
    };
    processFood = function(food) {
      var calculatedCalorieKey, calories, k, v;
      for (k in food) {
        v = food[k];
        if (_.contains(comparedKeys, k)) {
          if (v) {
            food[k] = parseFloat(v);
          } else {
            delete food[k];
          }
        }
      }
      ignoredKeys = [calorieKey, "Energy (kj)", "Total lipid (fat)", "Protein", "Carbohydrate, by difference"];
      calories = food[calorieKey];
      for (k in food) {
        v = food[k];
        if (typeof v === "number" && !_.contains(ignoredKeys, k)) {
          if (calories) {
            food[k] = v / calories;
          } else {
            food[k] = -v;
          }
        }
      }
      food[fatKey] || (food[fatKey] = 0);
      food[proteinKey] || (food[proteinKey] = 0);
      food[carbohydrateKey] || (food[carbohydrateKey] = 0);
      food[alcoholKey] || (food[alcoholKey] = 0);
      calculatedCalorieKey = "Calories, calculated";
      food[fatKey] *= 9;
      food[proteinKey] *= 4;
      food[carbohydrateKey] *= 4;
      food[alcoholKey] *= 7;
      food[calculatedCalorieKey] = food[fatKey] + food[proteinKey] + food[carbohydrateKey] + food[alcoholKey];
      food[fatKey] /= food[calculatedCalorieKey];
      food[proteinKey] /= food[calculatedCalorieKey];
      food[carbohydrateKey] /= food[calculatedCalorieKey];
      food[alcoholKey] /= food[calculatedCalorieKey];
      return food;
    };
    createFoodGroups = function(foods) {
      var food, foodGroups, group, i, _i, _j, _len, _len1;
      foodGroups = [];
      for (i = _i = 0, _len = foods.length; _i < _len; i = ++_i) {
        food = foods[i];
        if (!_.find(foodGroups, function(g) {
          return g.name === food.FdGrp_Desc;
        })) {
          foodGroups.push({
            name: food.FdGrp_Desc,
            id: "food-group-" + i,
            enabled: true
          });
        }
      }
      for (_j = 0, _len1 = foodGroups.length; _j < _len1; _j++) {
        group = foodGroups[_j];
        group.count = _.filter(foods, function(f) {
          return f.FdGrp_Desc === group.name;
        }).length;
      }
      return _.sortBy(foodGroups, function(f) {
        return f.name;
      });
    };
    createBenchmarkFood = function(nutrients) {
      var benchmarkFood, benchmarkKey, benchmarkValue, key, value;
      benchmarkFood = {};
      benchmarkKey = "RDI";
      for (key in nutrients) {
        value = nutrients[key];
        benchmarkValue = value[benchmarkKey];
        if (benchmarkValue) {
          benchmarkFood[key] = benchmarkValue;
        }
      }
      benchmarkFood.Long_Desc = "Recommended daily intake";
      benchmarkFood.NDB_No = "0";
      benchmarkFood[calorieKey] = 2000;
      return benchmarkFood = processFood(benchmarkFood);
    };
    return FoodData;
  });

  app.factory("Presets", function(FoodData, ComparePage) {
    var defaultPresets, presetSaveKey, savedPresets;
    defaultPresets = [
      {
        text: "Brown rice vs white rice",
        foods: "20037,20445"
      }, {
        text: "Wheat flour vs white flour",
        foods: "20080,20481"
      }, {
        text: "Vegetable protein - not just from beans!",
        foods: "11096,11090,11233,11457,11019,16043,16015,20137"
      }, {
        text: "Greens and meats",
        foods: "11457,11161,11250,05009,13443"
      }, {
        text: "Calcium (doesn't account for absorption!)",
        foods: "11161,11096,11457,01079,01026,01009"
      }, {
        text: "Beans vs rice",
        foods: "16043,20041"
      }
    ];
    presetSaveKey = "presets";
    savedPresets = window.localStorage.getItem(presetSaveKey);
    if (savedPresets) {
      savedPresets = JSON.parse(savedPresets);
    }
    return data = {
      save: function() {
        return window.localStorage.setItem(presetSaveKey, JSON.stringify(data.presets));
      },
      create: function(text) {
        var preset;
        preset = {
          text: text,
          foods: _.pluck(ComparePage.selectedFoods, "NDB_No").join(",")
        };
        data.presets.unshift(preset);
        return data.save();
      },
      presets: savedPresets || defaultPresets,
      add: function(text, foods) {
        data.presets.push({
          text: text,
          foods: foods
        });
        return data.save();
      },
      remove: function(preset) {
        data.presets = _.without(data.presets, preset);
        return data.save();
      },
      activate: function(preset) {
        var foods, ids;
        ids = preset.foods.split(",");
        foods = FoodData.findFoodsById(ids);
        return ComparePage.reset(foods);
      }
    };
  });

  visuals = angular.module("food-visuals", []);

  visuals.factory("Styles", function() {
    var Styles, blue, blueViolet, comparisonRowHeight, green, greenBlue, rainbow, red, redYellow, violet, violetRed, yellow, yellowGreen;
    red = d3.rgb(255, 106, 97).toString();
    yellow = d3.rgb(255, 212, 113).toString();
    green = d3.rgb(148, 228, 109).toString();
    blue = d3.rgb(110, 210, 239).toString();
    violet = d3.rgb(208, 146, 244).toString();
    redYellow = d3.interpolateRgb(red, yellow)(0.5);
    yellowGreen = d3.interpolateRgb(yellow, green)(0.5);
    greenBlue = d3.interpolateRgb(green, blue)(0.5);
    blueViolet = d3.interpolateRgb(blue, violet)(0.5);
    violetRed = d3.interpolateRgb(violet, red)(0.5);
    rainbow = [green, greenBlue, blue, blueViolet, violet, violetRed, red, redYellow, yellow, yellowGreen];
    comparisonRowHeight = 46;
    return Styles = {
      smallFontSize: 12,
      smallFontLineHeight: 13,
      largeFontSize: 24,
      horizontalPadding: 6,
      comparisonHeaderHeight: 92,
      comparisonRowHeight: comparisonRowHeight,
      comparisonCellWidth: 20,
      comparisonHorizontalSpacing: 44,
      pieChartRadius: (comparisonRowHeight / 2) - 3,
      colors: {
        red: red,
        redYellow: redYellow,
        yellow: yellow,
        yellowGreen: yellowGreen,
        green: green,
        greenBlue: greenBlue,
        blue: blue,
        blueViolet: blueViolet,
        violet: violet,
        violetRed: violetRed,
        rainbow: rainbow,
        getRainbowColor: function(i) {
          var count;
          count = rainbow.length;
          while (i >= count) {
            i -= count;
          }
          return rainbow[i];
        },
        lightGray: "#bbb",
        blueText: d3.rgb(blue).darker(0.3),
        greenText: d3.rgb(green).darker(0.3),
        redText: d3.rgb(red).darker(0.3)
      }
    };
  });

  visuals.factory("DrawingHelpers", function(Styles, FoodData, $location, $filter) {
    var DrawingHelpers, drawNutrientGroups, drawNutrients, drawPieChart, drawPieCharts;
    drawPieChart = function(svg, data, radius, options) {
      var arc, arcs, g, pie, x, y;
      if (options == null) {
        options = {};
      }
      x = options.x, y = options.y;
      if (x == null) {
        x = radius;
      }
      if (y == null) {
        y = radius;
      }
      g = svg.append("g").data([data]).attr("transform", "translate(" + x + ", " + y + ")");
      arc = d3.svg.arc().outerRadius(radius);
      pie = d3.layout.pie().value(function(d) {
        return d.value;
      }).sort(function(d) {
        return data.indexOf(d);
      });
      arcs = g.selectAll("g.slice").data(pie).enter().append("g").attr("class", "slice");
      return arcs.append("path").attr("fill", function(d, i) {
        return d.data.color;
      }).attr("d", arc);
    };
    drawPieCharts = function(vis, foods) {
      var food, foodIndex, foodY, labelData, pieChartData, svg, _i, _ref, _results;
      svg = vis.append("svg").attr("height", vis.attr("height")).attr("width", (Styles.pieChartRadius * 2) + Styles.comparisonHorizontalSpacing);
      labelData = [
        {
          text: "Protein",
          color: Styles.colors.blueText,
          NutrDesc: "Protein"
        }, {
          text: "Carbs",
          color: Styles.colors.greenText,
          NutrDesc: "Carbohydrate, by difference"
        }, {
          text: "Fat",
          color: Styles.colors.redText,
          NutrDesc: "Total lipid (fat)"
        }
      ];
      svg.selectAll("text.pie-chart-legend-label").data(labelData).enter().append("text").attr("class", "pie-chart-legend-label nutrient-label").attr("x", (parseInt(svg.attr("width")) - Styles.comparisonHorizontalSpacing) / 2).attr("y", function(d, i) {
        return (i * Styles.smallFontLineHeight) + Styles.comparisonRowHeight;
      }).attr("text-anchor", "middle").style("font-size", Styles.smallFontSize).style("fill", function(d) {
        return d.color;
      }).text(function(d) {
        return d.text;
      }).attr("onclick", function(d) {
        return FoodData.getNutrientJSLink(d.NutrDesc);
      });
      _results = [];
      for (foodIndex = _i = 0, _ref = foods.length; 0 <= _ref ? _i < _ref : _i > _ref; foodIndex = 0 <= _ref ? ++_i : --_i) {
        food = foods[foodIndex];
        foodY = Styles.comparisonHeaderHeight + foodIndex * Styles.comparisonRowHeight;
        pieChartData = [
          {
            value: food["Total lipid (fat)"],
            color: Styles.colors.red
          }, {
            value: food["Protein"],
            color: Styles.colors.blue
          }, {
            value: food["Carbohydrate, by difference"],
            color: Styles.colors.green
          }, {
            value: food["Alcohol, ethyl"],
            color: Styles.colors.lightGray
          }
        ];
        drawPieChart(svg, pieChartData, Styles.pieChartRadius, {
          x: Styles.pieChartRadius,
          y: foodY + Styles.pieChartRadius
        });
        _results.push(svg.append("text").text($filter("percent")(food.Protein)).attr("fill", Styles.colors.blueText).style("font-size", Styles.smallFontSize).attr("x", Styles.pieChartRadius * 2 + 7).attr("y", foodY + Styles.pieChartRadius + 4).attr("text-anchor", "left"));
      }
      return _results;
    };
    drawNutrients = function(vis, foods, nutrients) {
      var color, food, foodIndex, foodY, getLabelX, key, keyIndex, labelY, nutrientX, value, _i, _ref, _results;
      vis.append("text").attr("y", parseInt(vis.attr("height")) - 12).attr("x", (parseInt(vis.attr("width")) - Styles.comparisonHorizontalSpacing) / 2).attr("class", "nutrient-section-label").attr("text-anchor", "middle").style("font-size", Styles.largeFontSize).style("fill", nutrients.color).text((function() {
        switch (nutrients.text) {
          case "Fiber":
            return "";
          default:
            return nutrients.text;
        }
      })());
      getLabelX = function(i) {
        return i * Styles.comparisonCellWidth + 9;
      };
      labelY = Styles.comparisonHeaderHeight + Styles.horizontalPadding - 8;
      vis.selectAll("text.nutrient-label").data(nutrients).enter().append("text").attr("class", "nutrient-label").attr("transform", function(d, i) {
        return "rotate(-45 " + (getLabelX(i)) + " " + labelY + ")";
      }).attr("x", function(d, i) {
        return getLabelX(i);
      }).attr("y", labelY).style("font-size", Styles.smallFontSize).style("fill", function(d, i) {
        return Styles.colors.getRainbowColor(i);
      }).text(function(d) {
        return FoodData.nutrients[d].text;
      }).attr("onclick", function(d) {
        return FoodData.getNutrientJSLink(d);
      });
      _results = [];
      for (foodIndex = _i = 0, _ref = foods.length; 0 <= _ref ? _i < _ref : _i > _ref; foodIndex = 0 <= _ref ? ++_i : --_i) {
        food = foods[foodIndex];
        foodY = Styles.comparisonHeaderHeight + (foodIndex * Styles.comparisonRowHeight);
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (keyIndex = _j = 0, _ref1 = nutrients.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; keyIndex = 0 <= _ref1 ? ++_j : --_j) {
            key = nutrients[keyIndex];
            value = food[key + "_Compared"];
            if (value == null) {
              continue;
            }
            color = Styles.colors.getRainbowColor(keyIndex);
            nutrientX = keyIndex * Styles.comparisonCellWidth;
            vis.append("rect").attr("x", nutrientX).attr("y", foodY).attr("width", Styles.comparisonCellWidth).attr("height", Styles.comparisonRowHeight).attr("fill", "#000").attr("opacity", 0.08).attr("title", key);
            _results1.push(vis.append("rect").attr("x", nutrientX + (Styles.comparisonCellWidth / 2) - ((Styles.comparisonCellWidth * value) / 2)).attr("y", foodY).attr("width", Styles.comparisonCellWidth * value).attr("height", Styles.comparisonRowHeight).attr("fill", color).attr("title", key));
          }
          return _results1;
        })());
      }
      return _results;
    };
    drawNutrientGroups = function(vis, foods, groups) {
      var nutrients, svg, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = groups.length; _i < _len; _i++) {
        nutrients = groups[_i];
        svg = vis.append("svg").attr("width", (nutrients.length * Styles.comparisonCellWidth) + Styles.comparisonHorizontalSpacing).attr("height", parseInt(vis.attr("height")));
        _results.push(DrawingHelpers.drawNutrients(svg, foods, nutrients));
      }
      return _results;
    };
    return DrawingHelpers = {
      drawPieChart: drawPieChart,
      drawPieCharts: drawPieCharts,
      drawNutrients: drawNutrients,
      drawNutrientGroups: drawNutrientGroups
    };
  });

  visuals.directive("foodComparison", function(Styles, FoodData, DrawingHelpers) {
    return {
      restrict: "E",
      templateUrl: "partials/food-comparison.html",
      link: function(scope, element, attrs) {
        var render, vis;
        vis = d3.select(element[0]).select(".food-comparison-graphs");
        render = function() {
          var foods, height, numSelected, nutrientGroups;
          vis.selectAll("*").remove();
          foods = scope.ComparePage.selectedFoods;
          numSelected = foods.length;
          if (!numSelected) {
            vis.style("display", "none");
            return;
          }
          vis.style("display", "block");
          height = Styles.comparisonHeaderHeight + (Styles.comparisonRowHeight * (numSelected + 1));
          vis.attr("height", height);
          DrawingHelpers.drawPieCharts(vis, foods);
          nutrientGroups = [FoodData.fiberKeys, FoodData.vitaminKeys, FoodData.mineralKeys, FoodData.aminoAcidKeys, FoodData.fattyAcidKeys, FoodData.miscKeys, FoodData.sugarKeys];
          return DrawingHelpers.drawNutrientGroups(vis, foods, nutrientGroups);
        };
        return scope.$watch("ComparePage.selectedFoods", function() {
          return render();
        });
      }
    };
  });

}).call(this);
