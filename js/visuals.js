// Generated by CoffeeScript 1.5.0
(function() {
  var visuals;

  visuals = angular.module("visuals", []);

  visuals.factory("Styles", function() {
    var Styles, blue, blueViolet, comparisonRowHeight, green, greenBlue, rainbow, red, redYellow, violet, violetRed, yellow, yellowGreen;
    red = d3.rgb(255, 106, 97).toString();
    yellow = d3.rgb(255, 212, 113).toString();
    green = d3.rgb(148, 228, 109).toString();
    blue = d3.rgb(110, 210, 239).toString();
    violet = d3.rgb(208, 146, 244).toString();
    redYellow = d3.interpolateRgb(red, yellow)(0.5);
    yellowGreen = d3.interpolateRgb(yellow, green)(0.5);
    greenBlue = d3.interpolateRgb(green, blue)(0.5);
    blueViolet = d3.interpolateRgb(blue, violet)(0.5);
    violetRed = d3.interpolateRgb(violet, red)(0.5);
    rainbow = [green, greenBlue, blue, blueViolet, violet, violetRed, red, redYellow, yellow, yellowGreen];
    comparisonRowHeight = 46;
    return Styles = {
      smallFontSize: 12,
      smallFontLineHeight: 13,
      largeFontSize: 28,
      horizontalPadding: 6,
      comparisonHeaderHeight: 80,
      comparisonRowHeight: comparisonRowHeight,
      comparisonCellWidth: 20,
      comparisonHorizontalSpacing: 44,
      pieChartRadius: (comparisonRowHeight / 2) - 3,
      colors: {
        red: red,
        redYellow: redYellow,
        yellow: yellow,
        yellowGreen: yellowGreen,
        green: green,
        greenBlue: greenBlue,
        blue: blue,
        blueViolet: blueViolet,
        violet: violet,
        violetRed: violetRed,
        rainbow: rainbow,
        getRainbowColor: function(i) {
          var count;
          count = rainbow.length;
          while (i >= count) {
            i -= count;
          }
          return rainbow[i];
        },
        lightGray: "#bbb",
        blueText: d3.rgb(blue).darker(0.3),
        greenText: d3.rgb(green).darker(0.3),
        redText: d3.rgb(red).darker(0.3)
      }
    };
  });

  visuals.factory("DrawingHelpers", function(Styles, FoodData) {
    var DrawingHelpers, drawNutrientGroups, drawNutrients, drawPieChart, drawPieCharts;
    drawPieChart = function(vis, data, radius, options) {
      var arc, arcs, g, pie, x, y;
      if (options == null) {
        options = {};
      }
      x = options.x, y = options.y;
      if (x == null) {
        x = radius;
      }
      if (y == null) {
        y = radius;
      }
      g = vis.append("g").data([data]).attr("transform", "translate(" + x + ", " + y + ")");
      arc = d3.svg.arc().outerRadius(radius);
      pie = d3.layout.pie().value(function(d) {
        return d.value;
      }).sort(function(d) {
        return data.indexOf(d);
      });
      arcs = g.selectAll("g.slice").data(pie).enter().append("g").attr("class", "slice");
      return arcs.append("path").attr("fill", function(d, i) {
        return d.data.color;
      }).attr("d", arc);
    };
    drawPieCharts = function(vis, foods) {
      var food, foodIndex, foodY, labelData, pieChartData, svg, _i, _ref, _results;
      svg = vis.append("svg").attr("height", vis.attr("height")).attr("width", (Styles.pieChartRadius * 2) + Styles.comparisonHorizontalSpacing);
      labelData = [
        {
          text: "fat",
          color: Styles.colors.redText
        }, {
          text: "carbs",
          color: Styles.colors.greenText
        }, {
          text: "protein",
          color: Styles.colors.blueText
        }
      ];
      svg.selectAll("text.pie-chart-legend-label").data(labelData).enter().append("text").attr("class", "pie-chart-legend-label").attr("x", (parseInt(svg.attr("width")) - Styles.comparisonHorizontalSpacing) / 2).attr("y", function(d, i) {
        return (i * Styles.smallFontLineHeight) + Styles.comparisonRowHeight;
      }).attr("text-anchor", "middle").text(function(d) {
        return d.text;
      }).style("font-size", Styles.smallFontSize).style("fill", function(d) {
        return d.color;
      });
      _results = [];
      for (foodIndex = _i = 0, _ref = foods.length; 0 <= _ref ? _i < _ref : _i > _ref; foodIndex = 0 <= _ref ? ++_i : --_i) {
        food = foods[foodIndex];
        foodY = Styles.comparisonHeaderHeight + foodIndex * Styles.comparisonRowHeight;
        pieChartData = [
          {
            value: food["Total lipid (fat)"],
            color: Styles.colors.red
          }, {
            value: food["Protein"],
            color: Styles.colors.blue
          }, {
            value: food["Carbohydrate, by difference"],
            color: Styles.colors.green
          }, {
            value: food["Alcohol, ethyl"],
            color: Styles.colors.lightGray
          }
        ];
        _results.push(drawPieChart(svg, pieChartData, Styles.pieChartRadius, {
          x: Styles.pieChartRadius,
          y: foodY + Styles.pieChartRadius
        }));
      }
      return _results;
    };
    drawNutrients = function(vis, foods, nutrients) {
      var color, food, foodIndex, foodY, getLabelX, key, keyIndex, labelY, nutrientX, value, _i, _ref, _results;
      vis.append("text").attr("y", parseInt(vis.attr("height")) - 12).attr("x", (parseInt(vis.attr("width")) - Styles.comparisonHorizontalSpacing) / 2).attr("class", "nutrient-section-label").attr("text-anchor", "middle").style("font-size", Styles.largeFontSize).style("fill", nutrients.color).text(nutrients.text);
      getLabelX = function(i) {
        return i * Styles.comparisonCellWidth + 9;
      };
      labelY = Styles.comparisonHeaderHeight + Styles.horizontalPadding - 8;
      vis.selectAll("text.nutrient-label").data(nutrients).enter().append("text").attr("onclick", "javascript: alert('TODO: nutrient detail')").attr("class", "nutrient-label").attr("transform", function(d, i) {
        return "rotate(-45 " + (getLabelX(i)) + " " + labelY + ")";
      }).attr("x", function(d, i) {
        return getLabelX(i);
      }).attr("y", labelY).style("font-size", Styles.smallFontSize).style("fill", function(d, i) {
        return Styles.colors.getRainbowColor(i);
      }).text(function(d) {
        return FoodData.getKeyAlias(d);
      });
      _results = [];
      for (foodIndex = _i = 0, _ref = foods.length; 0 <= _ref ? _i < _ref : _i > _ref; foodIndex = 0 <= _ref ? ++_i : --_i) {
        food = foods[foodIndex];
        foodY = Styles.comparisonHeaderHeight + (foodIndex * Styles.comparisonRowHeight);
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (keyIndex = _j = 0, _ref1 = nutrients.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; keyIndex = 0 <= _ref1 ? ++_j : --_j) {
            key = nutrients[keyIndex];
            value = food[key + "_Compared"];
            if (value == null) {
              continue;
            }
            color = Styles.colors.getRainbowColor(keyIndex);
            nutrientX = keyIndex * Styles.comparisonCellWidth;
            vis.append("rect").attr("x", nutrientX).attr("y", foodY).attr("width", Styles.comparisonCellWidth).attr("height", Styles.comparisonRowHeight).attr("fill", "#000").attr("opacity", 0.08).attr("title", key);
            _results1.push(vis.append("rect").attr("x", nutrientX + (Styles.comparisonCellWidth / 2) - ((Styles.comparisonCellWidth * value) / 2)).attr("y", foodY).attr("width", Styles.comparisonCellWidth * value).attr("height", Styles.comparisonRowHeight).attr("fill", color).attr("title", key));
          }
          return _results1;
        })());
      }
      return _results;
    };
    drawNutrientGroups = function(vis, foods, groups) {
      var nutrients, svg, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = groups.length; _i < _len; _i++) {
        nutrients = groups[_i];
        svg = vis.append("svg").attr("width", (nutrients.length * Styles.comparisonCellWidth) + Styles.comparisonHorizontalSpacing).attr("height", parseInt(vis.attr("height")));
        _results.push(DrawingHelpers.drawNutrients(svg, foods, nutrients));
      }
      return _results;
    };
    return DrawingHelpers = {
      drawPieChart: drawPieChart,
      drawPieCharts: drawPieCharts,
      drawNutrients: drawNutrients,
      drawNutrientGroups: drawNutrientGroups
    };
  });

  visuals.directive("foodComparison", function(Styles, FoodData, DrawingHelpers) {
    return {
      restrict: "E",
      templateUrl: "partials/food-comparison.html",
      scope: {
        foodData: "="
      },
      link: function(scope, element, attrs) {
        var render, vis, width;
        width = (FoodData.nutrientKeys.length * Styles.comparisonCellWidth) + Styles.horizontalPadding + Styles.pieChartRadius;
        vis = d3.select(element[0]).select(".food-comparison-graphs");
        render = function() {
          var foods, height, numSelected, nutrientGroups;
          vis.selectAll("*").remove();
          foods = scope.foodData.selectedFoods;
          numSelected = foods.length;
          if (!numSelected) {
            vis.style("display", "none");
            return;
          }
          vis.style("display", "block");
          height = Styles.comparisonHeaderHeight + (Styles.comparisonRowHeight * (numSelected + 1));
          vis.attr("height", height);
          DrawingHelpers.drawPieCharts(vis, foods);
          nutrientGroups = [FoodData.miscKeys, FoodData.vitaminKeys, FoodData.mineralKeys, FoodData.aminoAcidKeys, FoodData.sugarKeys];
          return DrawingHelpers.drawNutrientGroups(vis, foods, nutrientGroups);
        };
        return scope.$watch("foodData.selectedFoods.length", function() {
          return render();
        });
      }
    };
  });

  visuals.directive("foodSearch", function(Styles) {
    return {
      restrict: "E",
      templateUrl: "partials/food-search.html",
      scope: {
        foodData: "="
      }
    };
  });

}).call(this);
